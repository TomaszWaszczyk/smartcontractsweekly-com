{"version":3,"sources":["webpack:///./src/sections/contact/Contact.PhoneForm.tsx","webpack:///./src/pages/contact.tsx"],"names":["validate","values","errors","phone","match","length","PhoneForm","state","submitted","handleSubmit","a","setErrors","setSubmitting","data","apiCall","method","endpoint","setState","console","warn","render","this","SubmittedTextContainer","SubmittedText","onSubmit","initialValues","StyledFormikForm","FormSection","component","Form","Phone","label","name","Component","styled","fieldset","FormikForm","media","desktop","fadeIn","keyframes","div","props","theme","transitions","in","p","ContactPage","animation","exitContactPage","setTimeout","window","history","back","handleEscKeyPress","key","componentDidMount","startAnimation","addEventListener","componentWillUnmount","removeEventListener","Layout","nav","offset","fixed","isContactPage","background","withFooter","SEO","title","pathname","location","image","contactMeta","childImageSharp","src","Hidden","FixedElement","Section","PhoneFormContainer","TextContainer","MainText","HighlightText","FormContainer","transitionDelay","transitionDelayMobile","baseDelay","CloseContainer","onClick","pageQuery","defaultStyle","transform","transitionStyles","entering","opacity","entered","exiting","exited","SlideIn","inProp","children","timeout","SlideInContainer","style","tablet","colors","grey","span","underline","button"],"mappings":"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","file":"component---src-pages-contact-tsx-f3a9ce9f326925b2132d.js","sourcesContent":["import React, { Component } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Formik, Form as FormikForm, Field } from 'formik'\n\nimport Form from '@components/Form'\nimport media from '@styles/media'\nimport { apiCall } from '@utils'\nimport { CheckIcon } from '../../icons/ui'\n\nconst validate = values => {\n  let errors = {}\n\n  if (values.phone && values.phone.match(/\\d/g).length !== 10) {\n    errors.phone = 'Full number required'\n  }\n\n  return errors\n}\n\nclass PhoneForm extends Component {\n  state = {\n    submitted: false,\n  }\n\n  handleSubmit = async (values, { setErrors, setSubmitting }) => {\n    const { phone } = values\n\n    // Throws error if empty number on submit since we don't validate on blur\n    if (!phone) {\n      return setErrors({ phone: 'Full number required' })\n    }\n\n    const method = 'post'\n    const endpoint = '/contact/phone'\n    const data = { phone }\n\n    try {\n      await apiCall({ method, endpoint, data })\n\n      setSubmitting(false)\n      this.setState({ submitted: true })\n    } catch (err) {\n      console.warn(err)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.submitted ? (\n          <SubmittedTextContainer>\n            <SubmittedText>Thank you! We'll call you shortly.</SubmittedText>{' '}\n            <CheckIcon />\n          </SubmittedTextContainer>\n        ) : (\n          <Formik\n            onSubmit={this.handleSubmit}\n            validate={validate}\n            initialValues={{ phone: '' }}\n            render={() => (\n              <StyledFormikForm>\n                <FormSection>\n                  <Field\n                    component={Form.Phone}\n                    label=\"123 456-7890\"\n                    name=\"phone\"\n                  />\n                </FormSection>\n              </StyledFormikForm>\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default PhoneForm\n\nconst FormSection = styled.fieldset`\n  margin-bottom: 5rem;\n`\n\nconst StyledFormikForm = styled(FormikForm)`\n  align-self: flex-end;\n  position: relative;\n  width: 36rem;\n\n  ${media.desktop`\n    width: 100%;\n  `};\n\n  ${media.phone`\n    max-width: 100%;\n  `};\n`\n\nconst fadeIn = keyframes`\n  from { opacity: 0; }\n  to { opacity: 1; }\n`\n\nconst SubmittedTextContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 1.8rem;\n  padding: 2rem 0 0 0;\n  margin-bottom: 7.8rem;\n  animation: 200ms ${fadeIn} ${props => props.theme.transitions.in};\n\n  ${media.desktop`\n    padding: 2rem 0 4rem;\n    margin-bottom: 0;\n  `};\n`\n\nconst SubmittedText = styled.p`\n  font-size: 1.8rem;\n  color: #fff;\n`\n","import React, { Component, Fragment } from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport Transition from 'react-transition-group/Transition'\n\nimport { Section } from '@components/Section/Section'\nimport Layout from '@components/Layout/Layout'\nimport SEO from '@components/SEO'\nimport { Hidden } from '@components/Hidden/Hidden'\n\nimport transitions from '@styles/transitions'\nimport media from '@styles/media'\nimport { startAnimation } from '@utils'\nimport { ExIcon } from '../icons/ui'\n\nimport ContactForm from '../sections/contact/Contact.ContactForm'\nimport PhoneForm from '../sections/contact/Contact.PhoneForm'\n\n/**\n * The contact page has a bit more complexity to it due to the nature\n * of animating in and wanting this page to handle more like a modal\n * than a regular page.\n *\n * Starting the animation will slidein the form.\n * Pressing the ESC key will navigate from the page like a modal.\n */\n\nclass ContactPage extends Component<{}, { animation: string }> {\n  state = { animation: '' }\n\n  componentDidMount() {\n    startAnimation(() => {\n      this.setState({\n        animation: 'start',\n      })\n    })\n\n    window.addEventListener('keydown', this.handleEscKeyPress)\n  }\n\n  componentWillUnmount() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('keydown', this.handleEscKeyPress)\n    }\n  }\n\n  exitContactPage = () => {\n    this.setState({ animation: '' })\n\n    // Wait for the animation out to navigate to the previous page\n    setTimeout(() => {\n      window.history.back()\n    }, 550)\n  }\n\n  handleEscKeyPress = ({ key }) => {\n    if (key === 'Escape') {\n      this.exitContactPage()\n    }\n  }\n\n  render() {\n    const { animation } = this.state\n    const navConfig = {\n      offset: true,\n      fixed: true,\n      isContactPage: true,\n      theme: 'light',\n    }\n\n    return (\n      <Layout nav={navConfig} background=\"#08080b\" withFooter={false}>\n        <Fragment>\n          <SEO\n            title=\"Contact\"\n            pathname={this.props.location.pathname}\n            image={this.props.data.contactMeta.childImageSharp.fixed.src}\n          />\n          <Hidden>\n            <h1>Contact</h1>\n          </Hidden>\n          <FixedElement>\n            <Section>\n              <PhoneFormContainer>\n                <TextContainer animation={animation}>\n                  <MainText>\n                    <HighlightText>No time to fill a form?</HighlightText> No\n                    problem, leave us your phone number and we'll call you back\n                    within 24 hours.\n                  </MainText>\n                  <PhoneForm />\n                </TextContainer>\n              </PhoneFormContainer>\n            </Section>\n          </FixedElement>\n          <SlideIn in={animation === 'start'}>\n            <FormContainer\n              animation={animation}\n              transitionDelay={500}\n              transitionDelayMobile={300}\n            >\n              <ContactForm baseDelay={1000} />\n            </FormContainer>\n          </SlideIn>\n          <CloseContainer onClick={this.exitContactPage} animation={animation}>\n            <ExIcon />\n          </CloseContainer>\n        </Fragment>\n      </Layout>\n    )\n  }\n}\n\nexport default ContactPage\n\nexport const pageQuery = graphql`\n  query ContactPageQuery {\n    contactMeta: file(name: { regex: \"/narative-meta/\" }) {\n      childImageSharp {\n        fixed(width: 1200, quality: 100) {\n          ...GatsbyImageSharpFixed_noBase64\n        }\n      }\n    }\n  }\n`\n\nconst defaultStyle = {\n  transform: 'translateY(100vh)',\n}\n\nconst transitionStyles = {\n  entering: { opacity: 0, transform: 'translateY(100vh)' },\n  entered: { opacity: 1, transform: 'translateY(40px)' },\n  exiting: { opacity: 1, transform: 'translateY(100vh)' },\n  exited: { opacity: 0, transform: 'translateY(100vh)' },\n}\n\nconst SlideIn = ({ in: inProp, children }) => (\n  <Transition in={inProp} timeout={600}>\n    {state => (\n      <SlideInContainer\n        style={{\n          ...defaultStyle,\n          ...transitionStyles[state],\n        }}\n      >\n        {children}\n      </SlideInContainer>\n    )}\n  </Transition>\n)\n\nconst SlideInContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 40px);\n  top: 0px;\n  right: 0px;\n  padding-top: 125px;\n  z-index: 10;\n  position: fixed;\n  overflow-y: scroll;\n  transition: transform 1.1s cubic-bezier(0.19, 1, 0.22, 1);\n  will-change: transform;\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  background: #fff;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  filter: blur(0);\n\n  ${media.tablet`\n    width: 100%;\n    position: relative;\n    top: 310px;\n    height: calc(100vh - 340px);\n    box-shadow: none;\n    padding-top: 7rem;\n    overflow: initial;\n\n    &::before {\n      content: '';\n      position: absolute;\n      top: 20px;\n      width: 42px;\n      margin: 0 auto;\n      left: 0;\n      right: 0;\n      height: 4px;\n      background: rgba(0, 0, 0, 0.2);\n      border-radius: 100px;\n    }\n  `};\n`\n\nconst TextContainer = styled.div`\n  ${transitions.fadeIn};\n`\n\nconst MainText = styled.p`\n  font-size: 1.8rem;\n  font-weight: 400;\n  color: ${p => p.theme.colors.grey};\n  margin-bottom: 2rem;\n`\n\nconst FixedElement = styled.div`\n  position: fixed;\n  left: 0;\n  right: 0;\n  width: 100%;\n`\n\nconst PhoneFormContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  display: none;\n\n  ${media.tablet`\n    display: block;\n    padding: 13rem 0 1rem;\n  `};\n`\n\nconst FormContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  width: 100%;\n  background: #fff;\n  z-index: 99999;\n`\n\nconst HighlightText = styled.span`\n  display: block;\n  color: #fff;\n  ${p => p.underline && `text-decoration: underline`};\n`\n\nconst CloseContainer = styled.button`\n  position: fixed;\n  z-index: 1000;\n  right: 0;\n  left: 0;\n  margin: 0 auto;\n  top: 24px;\n  cursor: pointer;\n  border-radius: 50%;\n  height: 40px;\n  width: 40px;\n  background: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transform: translateY(${p => (p.animation ? '0' : '-80px')});\n  transition: transform 0.7s cubic-bezier(0.215, 0.61, 0.355, 1)\n    ${p => (p.animation ? '1s' : '0s')};\n\n  ${media.tablet`\n    display: none;\n  `};\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: 40px;\n    width: 40px;\n    top: 0;\n    border-radius: 50%;\n    transform: scale(0.8);\n    transition: all 200ms ${p => p.theme.transitions.in};\n  }\n\n  &:hover::after {\n    background: rgba(0, 0, 0, 0.03);\n    transform: scale(1);\n  }\n`\n"],"sourceRoot":""}